---
title: "my-vignette"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{my-vignette}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  warning = FALSE,
  eval = FALSE,
  comment = "#>"
)
```

```{r setup}
library(IVCV)
library(MASS)
library(tidyverse)
library(Formula)
library(magrittr)
```


# IVCV for raw data
```{r}
# true effect: .1 .2 .3
I = 100
J = 200
(dat <- sim_IV(I = I, J = J, beta_X = c(.1, .2, .3), ctrl_id = 1))

colnames(dat$Y)  <- "y"
colnames(dat$X)  <- paste0("x", 1:3)
colnames(dat$Z)  <- paste0("z", 1:3)
dat <- data.frame(id = dat$id, dat$X, dat$Y, dat$Z)
head(dat)

IVCV(y ~ x1 + x2 + x3 | as.factor(id),
     id = id,
     ctrl_id = 1,
     data = dat,
     L1 = F)$fit %>% summary()
IVCV(y ~ x1 + x2 + x3 | as.factor(id),
     id = id,
     ctrl_id = 1,
     data = dat,
     L1 = T)$fit %>% summary()
sIVCV(y ~ x1 + x2 + x3 | as.factor(id),
     id = id,
     ctrl_id = 1,
     data = dat,
     L0 = F)$fit %>% summary()

```

# IVCV for raw data
```{r}
# true effect: .1 .2 .3
I = 100
J = 200
(dat <- sim_IV(I = I, J = J, beta_X = c(.1, .2, .3)  ,ctrl_id = 1))
colnames(dat$Y)  <- "y"
colnames(dat$X)  <- paste0("x", 1:3)
colnames(dat$Z)  <- paste0("z", 1:3)
dat <- data.frame(id = dat$id, dat$X, dat$Y, dat$Z)

sim_gIV() %>% head
```

# IVCV for summary data
```{r}
dat_mean <- dat %>% 
  group_by(id) %>% 
  summarise_at(vars(x1:z3), mean) %>% add_column(ctrl_id = rep(0:1, J/2))
data <- dat_mean
gIVCVs(y ~ x1 + x2 + x3,
      id = id,
      ctrl_id = ctrl_id,
      ctrl_sd = seq(0.1, 1, length.out = 200),
      L0 = T,
      data = dat_mean)
```

# gIVCV for summary data
```{r}
# true effect is .1, .2, .3
J = 200
I = 100
data_gIVCVs <- sim_gIV(beta_ctrl = .3, beta_X = c(.1, .2, .3), J = J, I = I)
data_gIVCVs %>% head()


# generalized IVCV with L0
gIVCVs(y ~ x1 + x2 + x3,
      id = id,
      ctrl_id = ctrl_id,
      ctrl_sd_x = sqrt(2/J) %>% 
        rep_col(3) %>% 
        rep_row(J),
      ctrl_sd_y = rep(sqrt(3/J), J),
      L0 = T,
      data = data_gIVCVs)$fit

# generalized IVCV without L0
gIVCVs(y ~ x1 + x2 + x3,
      id = id,
      ctrl_id = ctrl_id,
      ctrl_sd_x = sqrt(2/J) %>% 
        rep_col(3) %>% 
        rep_row(J),
      ctrl_sd_y = rep(sqrt(3/J), J),
      L0 = F,
      data = data_gIVCVs)
a1 <- c(0.11689,      0.25206,      0.20796, 0.30452  )
b1 <- c(0.16993,      0.29364,      0.37056,0.31573  )

a2 <- c(0.13314,      0.09726,      0.28252,    0.25373  )
b2 <- c(0.25888   ,   0.35120  ,    0.38034 , 0.26057 )

a3 <- c(-0.01866,      0.27109 ,     0.27288,  
    0.21041)  
b3 <- c(0.16833  ,    0.36421   ,   0.46129   ,   0.19786  )
    
    
a4 <- c(-0.12169  ,    0.24140 ,     0.38690 , 0.39602  )
b4 <- c(0.12135   ,   0.39590     , 0.54084,  0.38103  )
    
a5 <- c(0.05854 ,     0.05748    ,  0.28285 ,  0.33464      )
b5 <- c(0.25263    ,  0.12634     , 0.44051 ,   0.30573      )
    
tr <- c(.1, .2, .3, .3)
sum((a1 - tr)^2 + (a2 - tr)^2 + (a3 - tr)^2 + (a4 - tr)^2 + (a5 - tr)^2 )
sum((b1 - tr)^2 + (b2 - tr)^2 + (b3 - tr)^2 + (b4 - tr)^2 + (b5 - tr)^2 )

# true effect is .2, .4, .6
data_gIVCVs <- sim_gIV(beta_ctrl = .3, beta_X = c(.2, .4, .6), J = J, I = I)
data_gIVCVs %>% head()

# generalized IVCV with L0
gIVCVs(y ~ x1 + x2 + x3,
      id = id,
      ctrl_id = ctrl_id,
      ctrl_sd_x = sqrt(2/J) %>% 
        rep_col(3) %>% 
        rep_row(J),
      ctrl_sd_y = rep(sqrt(3/J), J),
      L0 = T,
      data = data_gIVCVs)$fit

# generalized IVCV without L0
gIVCVs(y ~ x1 + x2 + x3,
      id = id,
      ctrl_id = ctrl_id,
      ctrl_sd_x = sqrt(2/J) %>% 
        rep_col(3) %>% 
        rep_row(J),
      ctrl_sd_y = rep(sqrt(3/J), J),
      L0 = F,
      data = data_gIVCVs)


# true effect is .2, .4, .6
J = 100
i = 10000
data_gIVCVs <- sim_gIV(beta_ctrl = .3, beta_X = c(.2, .4, .6), J = J, I = I)
data_gIVCVs %>% head()

# generalized IVCV with L0
gIVCVs(y ~ x1 + x2 + x3,
      id = id,
      ctrl_id = ctrl_id,
      ctrl_sd_x = sqrt(2/J) %>% 
        rep_col(3) %>% 
        rep_row(J),
      ctrl_sd_y = rep(sqrt(3/J), J),
      L0 = T,
      data = data_gIVCVs)$fit

# generalized IVCV without L0
gIVCVs(y ~ x1 + x2 + x3,
      id = id,
      ctrl_id = ctrl_id,
      ctrl_sd_x = sqrt(2/J) %>% 
        rep_col(3) %>% 
        rep_row(J),
      ctrl_sd_y = rep(sqrt(3/J), J),
      L0 = F,
      data = data_gIVCVs)$coef[-1]

# simulation
sim_dat <- crossing(I = c(50, 100, 1000), J = c(50, 100, 1000)) %>%
  slice(rep(1:n(), each = 10)) %>%
  mutate(data = pmap(list(I, J),
                     ~ sim_gIV(
                       I = ..1,
                       J = ..2,
                       beta_ctrl = .2,
                       beta_X = c(.2, .4, .6)
                     )))

sim_dat %>% view()

sim_res <- 
  sim_dat %>% 
  mutate(TSLS_coef = map(data, ~gIVCVs(y ~ x1 + x2 + x3,
                                  id = id,
                                  ctrl_id = ctrl_id,
                                  ctrl_sd_x = sqrt(2/J) %>% 
                                    rep_col(3) %>% 
                                    rep_row(J),
                                  ctrl_sd_y = rep(sqrt(3/J), J),
                                  L0 = F,
                                  data = .x)$coef[-1])) %>% 
  mutate(IVCV_coef = map(data, ~gIVCVs(y ~ x1 + x2 + x3,
                                  id = id,
                                  ctrl_id = ctrl_id,
                                  ctrl_sd_x = sqrt(2/J) %>% 
                                    rep_col(3) %>% 
                                    rep_row(J),
                                  ctrl_sd_y = rep(sqrt(3/J), J),
                                  L0 = T,
                                  data = .x)$fit$coef[-1]))
  
crossing(I = 50, J = 50) %>%
  mutate(data = pmap(list(I, J),
                     ~ sim_gIV(
                       I = ..1,
                       J = ..2,
                       beta_ctrl = .2,
                       beta_X = c(.2, .4, .6)
                     ))) %>% 
  mutate(TSLS_coef = pmap(list(data, J), ~gIVCVs(y ~ x1 + x2 + x3,
                                  id = id,
                                  ctrl_id = ctrl_id,
                                  ctrl_sd_x = sqrt(2/..2) %>% 
                                    rep_col(3) %>% 
                                    rep_row(..2),
                                  ctrl_sd_y = rep(sqrt(3/..2), ..2),
                                  L0 = F,
                                  data = ..1)$coef[-1])) %>% 
  mutate(IVCV_coef = pmap(list(data, J), ~gIVCVs(y ~ x1 + x2 + x3,
                                  id = id,
                                  ctrl_id = ctrl_id,
                                  ctrl_sd_x = sqrt(2/..2) %>% 
                                    rep_col(3) %>% 
                                    rep_row(..2),
                                  ctrl_sd_y = rep(sqrt(3/..2), ..2),
                                  L0 = T,
                                  data = ..1)$fit$coef[-1]))
```


# Model demo
```{r}
demo_RE()
```

